// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/service.go
//
// Generated by this command:
//
//	mockgen --source=internal/ports/service.go --destination=internal/mocks/mock_service.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/duksonn/stay-for-long/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsService is a mock of StatsService interface.
type MockStatsService struct {
	ctrl     *gomock.Controller
	recorder *MockStatsServiceMockRecorder
	isgomock struct{}
}

// MockStatsServiceMockRecorder is the mock recorder for MockStatsService.
type MockStatsServiceMockRecorder struct {
	mock *MockStatsService
}

// NewMockStatsService creates a new mock instance.
func NewMockStatsService(ctrl *gomock.Controller) *MockStatsService {
	mock := &MockStatsService{ctrl: ctrl}
	mock.recorder = &MockStatsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsService) EXPECT() *MockStatsServiceMockRecorder {
	return m.recorder
}

// CalculateStats mocks base method.
func (m *MockStatsService) CalculateStats(requests domain.Bookings) *domain.StatsResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateStats", requests)
	ret0, _ := ret[0].(*domain.StatsResult)
	return ret0
}

// CalculateStats indicates an expected call of CalculateStats.
func (mr *MockStatsServiceMockRecorder) CalculateStats(requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateStats", reflect.TypeOf((*MockStatsService)(nil).CalculateStats), requests)
}

// MaximizeProfit mocks base method.
func (m *MockStatsService) MaximizeProfit(requests domain.Bookings) *domain.MaximizeResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaximizeProfit", requests)
	ret0, _ := ret[0].(*domain.MaximizeResult)
	return ret0
}

// MaximizeProfit indicates an expected call of MaximizeProfit.
func (mr *MockStatsServiceMockRecorder) MaximizeProfit(requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaximizeProfit", reflect.TypeOf((*MockStatsService)(nil).MaximizeProfit), requests)
}
